# Build using Visual Studio 2017 on Windows Server 2016.

trigger: none

pool:
  vmImage: 'vs2017-win2016'

jobs:
  - job: Get_build_version

    steps:

    - task: PowerShell@2
      displayName: 'Get version variable'
      env:
        PAT: $(PAT)
      inputs:
        targetType: 'inline'
        script: |
          $Token = $env:PAT
          $Base64Token = [System.Convert]::ToBase64String([char[]]$Token)
          $Headers = @{
              Authorization = 'Basic {0}' -f $Base64Token;
              }
          $ReleaseList = (Invoke-RestMethod -Headers $Headers -Uri https://api.github.com/repos/epam/sitecore-headless-commerce-accelerator/branches -Method Get).name | Where-Object { $_.Contains("release")}
          $LastReleaseNumber = $ReleaseList[-1].Split("/")[1]
          $MajorVersionNumber = $LastReleaseNumber.Split(".")[0]
          $MinorVersionNumber = $LastReleaseNumber.Split(".")[1]/1 + 1
          $PatchVersionNumber = $LastReleaseNumber.Split(".")[2]
          $VersionNumber = $MajorVersionNumber + "." + $MinorVersionNumber + "." + $PatchVersionNumber
          $LastVersion = "$(HCA_Version)".Split("-")[1]
          if ($VersionNumber -ne $LastVersion) {
            $BranchVersion = $VersionNumber + "-$(branch_revision)"
          }
          else {
            $BranchVersion = "$(HCA_Version)"
          }
          Write-Host "##vso[task.setvariable variable=BranchVersion]$BranchVersion"


    - task: Bash@3
      displayName: 'Set version variable'
      inputs:
        targetType: 'inline'
        script: |
          curl -fL -XPUT -H "Authorization:Bearer $(System.AccessToken)" -H "Content-Type:application/json" \
            -d '{
              "id": "$(HCA_Version_Variable_Group_ID)",
              "type": "Vsts",
              "name": "HCA_Version",
              "variables": {
                "HCA_Version_Variable_Group_ID": {
                "isSecret": false,
                "value": "$(HCA_Version_Variable_Group_ID)"
                },
                "HCA_Version": {
                "isSecret": false,
                "value": "$(BranchVersion)"
                }
              }
            }' \
            $(System.TeamFoundationCollectionUri)/$(TeamProject)/_apis/distributedtask/variablegroups/$(HCA_Version_Variable_Group_ID)?api-version=5.0-preview.1


  - job: Set_build_version
    dependsOn: Get_build_version

    variables:
      ReleaseVersionNumber: $[counter(variables['HCA_Version'], 1)]
    
    steps:
    - task: PowerShell@2
      displayName: 'Set build version'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "##vso[build.updatebuildnumber]$(HCA_Version).$(ReleaseVersionNumber)"
          Write-Host "##vso[task.setvariable variable=NpmjsVersion]$(HCA_Version).$(ReleaseVersionNumber)"

    - task: Bash@3
      displayName: 'Set build version variable'
      inputs:
        targetType: 'inline'
        script: |
          curl -fL -XPUT -H "Authorization:Bearer $(System.AccessToken)" -H "Content-Type:application/json" \
            -d '{
              "id": "$(HCA_Version_Variable_Group_ID)",
              "type": "Vsts",
              "name": "HCA_Version",
              "variables": {
                "HCA_Version_Variable_Group_ID": {
                "isSecret": false,
                "value": "$(HCA_Version_Variable_Group_ID)"
                },
                "HCA_Version": {
                "isSecret": false,
                "value": "$(HCA_Version)"
                },
                "HCA_Deploy_Version": {
                "isSecret": false,
                "value": "$(NpmjsVersion)"
                }
              }
            }' \
            $(System.TeamFoundationCollectionUri)/$(TeamProject)/_apis/distributedtask/variablegroups/$(HCA_Version_Variable_Group_ID)?api-version=5.0-preview.1

  - job: Build_and_test
    dependsOn: Set_build_version

    variables:
      build_cake: './src/build.cake'
      artifacts_location: '$(Pipeline.Workspace)/s/output'

    steps:

    - task: UseNode@1
      displayName: Installing Node 10
      inputs:
        script: 'npm --version'

    - task: DownloadSecureFile@1
      displayName: Download license
      name: license_file
      inputs:
        secureFile: 'license.xml'

    - task: DownloadPipelineArtifact@2
      displayName: Download node modules
      inputs:
        buildType: 'specific'
        project: 'c8a112df-eb95-41fa-bb80-48e83128fe75'
        definition: '10'
        buildVersionToDownload: 'latest'
        artifactName: 'node_modules'
        targetPath: '$(Pipeline.Workspace)/s/src/node_modules'

    - task: DownloadPipelineArtifact@2
      displayName: Download client node modules
      inputs:
        buildType: 'specific'
        project: 'c8a112df-eb95-41fa-bb80-48e83128fe75'
        definition: '10'
        buildVersionToDownload: 'latest'
        artifactName: 'client_node_modules'
        targetPath: '$(Pipeline.Workspace)/s/src/client/node_modules'

    - task: DownloadPipelineArtifact@2
      displayName: Download packages
      inputs:
        buildType: 'specific'
        project: 'c8a112df-eb95-41fa-bb80-48e83128fe75'
        definition: '10'
        buildVersionToDownload: 'latest'
        artifactName: 'packages'
        targetPath: '$(Pipeline.Workspace)/s/src/packages'

    - task: DownloadPipelineArtifact@2
      displayName: Download tools
      inputs:
        buildType: 'specific'
        project: 'c8a112df-eb95-41fa-bb80-48e83128fe75'
        definition: '10'
        buildVersionToDownload: 'latest'
        artifactName: 'tools'
        targetPath: '$(Pipeline.Workspace)/s/src/tools'

    - task: PowerShell@2
      displayName: Config preparation
      inputs:
        targetType: 'inline'
        script: |
          Move-Item $(license_file.secureFilePath) ./src/ -Force
    - task: FileTransform@2
      displayName: Transform web.config
      inputs:
        folderPath: '$(System.DefaultWorkingDirectory)/src/configs/Sitecore/'
        xmlTransformationRules: '-transform **\*.config.$(environment_type).transform -xml **\*.config'

    - task: PowerShell@2
      displayName: Add appSettigns section for transform
      inputs:
        targetType: 'inline'
        script: |
          (Get-Content $(transform_variables_file)) -replace "<configuration>", "<configuration>`n<appSettings>" -replace '</configuration>', "</appSettings>`n</configuration>" | Set-Content $(transform_variables_file)
    - task: FileTransform@2
      displayName: Fill config with variables via transform
      inputs:
        folderPath: '$(project_config_folder)'
        xmlTargetFiles: '$(transform_variables_file)'

    - task: PowerShell@2
      displayName: Remove appSettigns section after transform
      inputs:
        targetType: 'inline'
        script: |
          (Get-Content $(transform_variables_file)) -replace "<appSettings>", "" -replace "</appSettings>", "" | Set-Content $(transform_variables_file)

    - task: gulp@1
      displayName: Gulp cs code generation
      inputs:
        gulpFile: './src/scripts/code-generation/codeGen.js'
        targets: 
        arguments: 'generate-cs'
        enableCodeCoverage: false

    - task: gulp@1
      displayName: Gulp ts code generation
      inputs:
        gulpFile: './src/client/scripts/code-generation/codeGen.js'
        targets: 
        arguments: 'generate-ts'
        enableCodeCoverage: false

    - task: PowerShell@2
      displayName: Webpack build
      inputs:
        targetType: 'inline'
        script: |
          $env:path="$env:path;$(Pipeline.Workspace)/s/src/node_modules/.bin"
          $env:path="$env:path;$(Pipeline.Workspace)/s/src/client/node_modules/.bin"
          $env:path="$env:path;$(Pipeline.Workspace)/s/src/tools"
          copyfiles -f  ./src/Project/HCA/public/**/* ./src/Project/HCA/build/
          $(Pipeline.Workspace)/s/src/client/node_modules/.bin/cross-env.cmd NODE_ENV=production $(Pipeline.Workspace)/s/src/client/node_modules/.bin/webpack.cmd
        workingDirectory: './src/client'

    - task: NuGetCommand@2
      displayName: 'NuGet restore'
      inputs:
        command: 'restore'
        restoreSolution: '$(Pipeline.Workspace)/s/src/HCA.sln'
        feedsToUse: 'config'
        nugetConfigPath: '$(Pipeline.Workspace)/s/src/nuget.config'

    - task: MSBuild@1
      displayName: MSBuild
      inputs:
        solution: './src/HCA.sln'
        msbuildVersion: '15.0'
        configuration: 'Debug'
        msbuildArguments: '/t:Rebuild'

    - task: PowerShell@2
      displayName: Run Unit tests
      inputs:
        filePath: './src/build.ps1'
        arguments: '-Target 003-Tests'
        workingDirectory: './src/'

    - task: PublishCodeCoverageResults@1
      displayName: Publish code coverage
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(Pipeline.Workspace)/s/output/tests/coverage/cobertura-coverage.xml'

    - task: MSBuild@1
      displayName: MSBuild Foundation
      inputs:
        solution: './src/Foundation/**/*.csproj'
        msbuildVersion: '15.0'
        configuration: 'Debug'
        msbuildArguments: '/t:Build /p:Verbosity=Minimal /p:DeployOnBuild=True'

    - task: MSBuild@1
      displayName: MSBuild Feature
      inputs:
        solution: './src/Feature/**/*.csproj'
        msbuildVersion: '15.0'
        configuration: 'Debug'
        msbuildArguments: '/t:Build /p:Verbosity=Minimal /p:DeployOnBuild=True'

    - task: MSBuild@1
      displayName: MSBuild Project
      inputs:
        solution: './src/Project/**/*.csproj'
        msbuildVersion: '15.0'
        configuration: 'Debug'
        msbuildArguments: '/t:Build /p:Verbosity=Minimal /p:DeployOnBuild=True'

    - task: PowerShell@2
      displayName: Collect files for artifacts
      env:
        Workspace: $(Pipeline.Workspace)
      inputs:
        targetType: 'inline'
        script: |
          robocopy $(Pipeline.Workspace)/s/src/configs/Sitecore/ $(Pipeline.Workspace)/s/output/ web.config
          robocopy $(Pipeline.Workspace)/s/src/tools/cake.sitecore/Cake.Sitecore/tools/unicorn $(Pipeline.Workspace)/s/output/unicorn-sync /s
          ./automation/Get-Artifacts.ps1 Feature
          ./automation/Get-Artifacts.ps1 Foundation
          ./automation/Get-Artifacts.ps1 Project
          robocopy $(Pipeline.Workspace)/s/src/client/src/Project/$(project_name)/build $(Pipeline.Workspace)/s/output/Project/dist/$(project_name)/Project/$(project_name) /s
        errorActionPreference: 'continue'
        ignoreLASTEXITCODE: true

    - task: PowerShell@2
      displayName: Change default parameters for $(project_name)
      inputs:
        targetType: 'inline'
        script: |
          (Get-Content $(project_site_config)) -replace 'hostName=$(quotes_regexp)', 'hostName="$(sitecore_hostname)"' | Set-Content $(project_site_config)
          (Get-Content $(foundation_commerce_config)) -replace '<server>.*</server>', '<server>$(smtp_server)</server>' -replace '<userName>.*</userName>', '<userName>$(smtp_username)</userName>' -replace '<password>.*</password>', '<password>$(smtp_password)</password>' | Set-Content $(foundation_commerce_config)
    - task: PublishPipelineArtifact@1
      displayName: Publish web config
      inputs:
        targetPath: '$(artifacts_location)/web.config'
        artifact: 'web_config'
        publishLocation: 'pipeline'

    - task: PublishPipelineArtifact@1
      displayName: Publish unicorn
      inputs:
        targetPath: '$(artifacts_location)/unicorn'
        artifact: 'unicorn'
        publishLocation: 'pipeline'

    - task: PublishPipelineArtifact@1
      displayName: Publish Feature 
      inputs:
        targetPath: '$(artifacts_location)/Feature'
        artifact: 'Feature'
        publishLocation: 'pipeline'

    - task: PublishPipelineArtifact@1
      displayName: Publish Foundation 
      inputs:
        targetPath: '$(artifacts_location)/Foundation'
        artifact: 'Foundation'
        publishLocation: 'pipeline'

    - task: PublishPipelineArtifact@1
      displayName: Publish Project 
      inputs:
        targetPath: '$(artifacts_location)/Project'
        artifact: 'Project'
        publishLocation: 'pipeline'

    - task: PublishPipelineArtifact@1
      displayName: Publish unicorn sync tool 
      inputs:
        targetPath: '$(artifacts_location)/unicorn-sync'
        artifact: 'unicorn-sync'
        publishLocation: 'pipeline'